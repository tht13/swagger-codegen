{{>licenseInfo}}
/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

{{#operations}}
namespace {{package}} {
    'use strict';

{{#description}}
    /**
    * {{&description}}
    */
{{/description}}
    export class {{classname}} {
        protected basePath = '{{basePath}}';
        public defaultHeaders : any = {};
        public configuration: Configuration = new Configuration();

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

{{#operation}}
        /**
         * {{summary}}
         * {{notes}}
         {{#allParams}}* @param {{paramName}} {{description}}
         {{/allParams}}*/
        public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: any ) : ng.IHttpPromise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
            const localVarPath = this.basePath + '{{path}}'{{#pathParams}}
                .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
{{#hasFormParams}}
            let formParams: any = {};

{{/hasFormParams}}
{{#allParams}}
{{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }
{{/required}}
{{/allParams}}
{{#queryParams}}
            if ({{paramName}} !== undefined) {
                queryParameters['{{baseName}}'] = {{paramName}};
            }

{{/queryParams}}
{{#headerParams}}
            headerParams['{{baseName}}'] = {{paramName}};

{{/headerParams}}
{{#hasFormParams}}
            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

{{/hasFormParams}}
{{#formParams}}
            formParams['{{baseName}}'] = {{paramName}};

{{/formParams}}
{{#authMethods}}
        // authentication ({{name}}) required
{{#isApiKey}}
{{#isKeyInHeader}}
        if (this.configuration.apiKey && this.configuration.apiKey.{{keyParamName}}) {
            headerParams['{{keyParamName}}'] = this.configuration.apiKey.{{keyParamName}};
        }
{{/isKeyInHeader}}
{{#isKeyInQuery}}
        if (this.configuration.apiKey && this.configuration.apiKey.{{keyParamName}}) {
            queryParameters['{{keyParamName}}'] = this.configuration.apiKey.{{keyParamName}};
        }
{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }
{{/isBasic}}
{{#isOAuth}}
        // oauth required
        if (this.configuration.accessToken) {
            headerParams['Authorization'] = 'Bearer ' + this.configuration.accessToken;
        }
{{/isOAuth}}
{{/authMethods}}
            let httpRequestParams: any = {
                method: '{{httpMethod}}',
                url: localVarPath,
                json: {{#hasFormParams}}false{{/hasFormParams}}{{^hasFormParams}}true{{/hasFormParams}},
                {{#bodyParam}}data: {{paramName}},
                {{/bodyParam}}
                {{#hasFormParams}}data: this.$httpParamSerializer(formParams),
                {{/hasFormParams}}
                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
{{/operation}}
    }
}
{{/operations}}
